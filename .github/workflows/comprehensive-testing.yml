name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: booking_swap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend unit tests
        run: npm run test:unit --workspace=@booking-swap/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run frontend unit tests
        run: npm run test:unit --workspace=@booking-swap/frontend

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/backend/coverage/lcov.info,./apps/frontend/coverage/lcov.info
          flags: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: booking_swap_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run migrate --workspace=@booking-swap/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_integration_test
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_integration_test
          REDIS_URL: redis://localhost:6379
          HEDERA_NETWORK: testnet
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration-results.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: booking_swap_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build applications
        run: npm run build

      - name: Run database migrations
        run: npm run migrate --workspace=@booking-swap/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_e2e_test
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_e2e_test
          REDIS_URL: redis://localhost:6379
          HEDERA_NETWORK: testnet
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-videos
          path: test-results/videos/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: booking_swap_security_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Security Testing Dependencies
        run: |
          npm install -g eslint-plugin-security eslint-plugin-no-secrets
          # Try to install optional security tools
          npm install -g semgrep || echo "Semgrep not available"
          npm install -g snyk || echo "Snyk not available"

      - name: Run database migrations
        run: npm run migrate --workspace=@booking-swap/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_security_test
          NODE_ENV: test

      - name: Start applications for security testing
        run: |
          npm run dev:backend &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_security_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          PORT: 3000

      - name: Run Comprehensive Security Tests
        run: |
          chmod +x scripts/run-security-tests.js
          node scripts/run-security-tests.js
        env:
          NODE_ENV: test
          TEST_TARGET_URL: http://localhost:3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_security_test
          REDIS_URL: redis://localhost:6379

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: |
            security-report.html
            security-report.json
            security-summary.json
            zap-report.html

      - name: Comment Security Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));
              const status = summary.status === 'PASS' ? '‚úÖ' : '‚ùå';
              const comment = `
              ## ${status} Security Test Results
              
              **Status:** ${summary.status}
              **Total Tests:** ${summary.total_tests}
              **Passed:** ${summary.passed_tests}
              **Failed:** ${summary.failed_tests}
              
              **Security Issues:**
              - üî¥ Critical: ${summary.critical_issues}
              - üü† High: ${summary.high_issues}
              - üü° Medium: ${summary.medium_issues}
              - üü¢ Low: ${summary.low_issues}
              
              ${summary.status === 'FAIL' ? '‚ö†Ô∏è **Security issues found! Please review the detailed report.**' : 'üéâ **No critical security issues detected!**'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post security results comment:', error);
            }

      - name: Fail on Critical Security Issues
        run: |
          if [ -f security-summary.json ]; then
            CRITICAL=$(cat security-summary.json | jq -r '.critical_issues')
            HIGH=$(cat security-summary.json | jq -r '.high_issues')
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ùå Critical or high severity security issues found!"
              echo "Critical: $CRITICAL, High: $HIGH"
              exit 1
            fi
          fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: booking_swap_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: npm run build

      - name: Start applications
        run: |
          npm run dev:backend &
          npm run dev:frontend &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/booking_swap_perf_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: production

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: npm run test:load

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: performance-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build applications
        run: npm run build

      - name: Start applications
        run: |
          npm run dev:backend &
          npm run dev:frontend &
          sleep 30

      - name: Run accessibility tests
        run: npx playwright test tests/accessibility/ --reporter=html

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: playwright-report/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: 'Comprehensive test suite failed on ${{ github.ref }}'