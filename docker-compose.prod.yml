version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: booking-swap-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-booking_swap}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/src/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - booking-swap-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: booking-swap-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - booking-swap-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: booking-swap-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-booking_swap}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      HEDERA_ACCOUNT_ID: ${HEDERA_ACCOUNT_ID}
      HEDERA_PRIVATE_KEY: ${HEDERA_PRIVATE_KEY}
      HEDERA_NETWORK: ${HEDERA_NETWORK:-mainnet}
      EMAIL_SERVICE_API_KEY: ${EMAIL_SERVICE_API_KEY}
      SMS_SERVICE_API_KEY: ${SMS_SERVICE_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://bookingswap.com}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking-swap-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: booking-swap-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - booking-swap-network
    restart: unless-stopped
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: booking-swap-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - booking-swap-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: booking-swap-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - booking-swap-network
    restart: unless-stopped

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: booking-swap-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - booking-swap-network
    restart: unless-stopped

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: booking-swap-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    depends_on:
      - loki
    networks:
      - booking-swap-network
    restart: unless-stopped

networks:
  booking-swap-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data: